package com.kh.serviceCenter.model.dao;
import static com.kh.common.JDBCTemplate.close;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import com.kh.common.PageInfo;
import com.kh.serviceCenter.model.vo.FAQ;

public class ScDao {
	Properties prop = new Properties();
	public ScDao() {
		String fileName = ScDao.class.getResource("/db/ServiceCenter/serviceCenter-mapper.xml").getPath();
		try {
			prop.loadFromXML(new FileInputStream(fileName));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public int selectFAQListCount(Connection conn) {
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		int listCount = 0;
		String sql = prop.getProperty("selectFAQListCount");
		
		try {
			pstmt = conn.prepareStatement(sql);
			rset = pstmt.executeQuery();
			if(rset.next()) listCount = rset.getInt("COUNT");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		
		return listCount;
	}
	public ArrayList<FAQ> selectFAQList(Connection conn, PageInfo pi) {
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		ArrayList<FAQ> FAQList = new ArrayList<>();
		String sql = prop.getProperty("selectFAQList");
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, (pi.getCurrentPage()-1)*pi.getBoardLimit()+1);
			pstmt.setInt(2, pi.getCurrentPage()*pi.getBoardLimit());
			rset = pstmt.executeQuery();
			while(rset.next()) {
				FAQList.add(new FAQ(rset.getInt("FAQ_NO"),
						rset.getString("CATE_NAME"),
						rset.getString("FAQ_TITLE"),
						rset.getString("FAQ_CONTENT"),
						rset.getString("FAQ_STATUS")));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		
		return FAQList;
	}
	public int ajaxHideSc(Connection conn, int[] fnoArr) {
		PreparedStatement pstmt = null;
		int result = 1;
		String sql = prop.getProperty("ajaxHideSc");
		try {
			for(int i=0;i<fnoArr.length;i++) {
				pstmt=conn.prepareStatement(sql);
				pstmt.setInt(1, fnoArr[i]);
				result = result * pstmt.executeUpdate();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		return result;
	}
	public int insertFAQ(Connection conn, FAQ faq) {
		PreparedStatement pstmt = null;
		int result = 0;
		String sql = prop.getProperty("insertFAQ");
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setInt(1, faq.getFaqCate());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}
	public int updateFAQ(Connection conn, FAQ faq) {
		// TODO Auto-generated method stub
		return 0;
	}

}
