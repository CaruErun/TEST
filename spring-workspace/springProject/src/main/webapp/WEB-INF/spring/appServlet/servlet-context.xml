<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!--
		주소 자동 완성 도구
		 - view resolver 도구 등록(spring 제공)
		 - class : 패키지 경로를 포함한 view resolver 풀 클래스 명
		 - prefix : 접두어 / suffix : 접미어
	 -->
	
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		base-package에 설정된 패키지와 하위 패키지 감시해서 등록 가능한 도구(component)를 찾아서 등록
	 -->
	<context:component-scan base-package="com.kh.spring" />
		<!-- 
		사용자가 어떤 url로 요청 시 문서가 읽혀지는 지
		
		HandlerMapping을 통해서 어떤 url 로 요청했을 때 해당 controller를 구동시킬 것인지 파악해야함
		
		1. 요청이 실행될 controller 클래스들이 빈으로 등록되어있음
		<beans: bean class = "com.kh.spring.member.loginController" id="loginController"/>
		...
		...
		
		2. 어떤 url로 요청 들어온 것을 처리할 것인지 매핑 시켜줘야함
		<beans:been class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"/>
			<beans:property name="mappings">
				<beans:props>
					<beans:prop key="login.me">loginController</beans:prop>
					...
				</beans:props>
			</beans:property>
		</beans:been>
	 -->
		<!-- 
		xml 방식
		 - 장점 : xml 문서 내에서 한눈에 볼 수 있기 때문에 관리의 편의성이 높음
		 - 단점 : bean 개수가 많아지면 관리가 어려워짐. 유지보수가 힘듬
		 
		 *어노테이션 방식
		 -component-scan 에서 지정한 패키지명 하위의 모든 클래스를 스캔하여 @Controller와 같은 MVC 클래스를 자동으로 bean 등록 해줌
		 @Service @Repository @Component
		 
		 직접 만든 클래스가 아닐 경우 컴파일된 class 형태로 배포되어 소스코드 내부 확인 및 수정 불가로 코드상 어노티이션 붙일 수 없음
		 이 경우에 xml형식으로 bean 등록해야함
		 -->
	
</beans:beans>
